[{"dateTime":"2022-11-04T14:19:11.789Z","text":"Base classes are abstractions that allow you to focus on common attributes of a set of derived classes and ignore the details of the specific classes while you're working on the base class. A good class interface is an abstraction that allows you to focus on the interface without needing to worry about the internal workings of the class. The interface to a well-designed routine provides the same benefit at a lower level of detail, and the interface to a well-designed package or subsystem provides that benefit at a higher level of detail.","hash":"baa918b7fae1e126b9e7f7f069d70405","fileHash":"c3d57eb88086a04b1e04d06a9b6188e5","chapterSeperator":"^Chapter \\d\\.","ID":73,"language":"en"},{"hash":"[{\"dateTime\":\"2022-11-04T11:18:42.753Z\",\"text\":\"A good general rule is that a system-level diagram like Figure 5-5 should be an acyclic graph. In other words, a program shouldn't contain any circular relationships in which Class A uses Class B, Class B uses Class C, and Class C uses Class A.\",\"hash\":\"4cde34e9742d806328bfc3d78a6a7d32\",\"fileHash\":\"c3d57eb88086a04b1e04d06a9b6188e5\",\"chapterSeperator\":\"^Chapter \\\\d\\\\.\",\"ID\":73,\"language\":\"en\"},{\"hash\":\"[{\\\"dateTime\\\":\\\"2022-11-04T09:42:10.029Z\\\",\\\"text\\\":\\\"Chapter 1. Welcome to Software Construction\\\",\\\"hash\\\":\\\"fc7f5fdec04d3984cc04732e8b7e6f39\\\",\\\"fileHash\\\":\\\"c3d57eb88086a04b1e04d06a9b6188e5\\\",\\\"chapterSeperator\\\":\\\"^Chapter \\\\\\\\d\\\\\\\\.\\\",\\\"ID\\\":73,\\\"language\\\":\\\"en\\\"}]\",\"dateTime\":\"2022-11-04T09:46:40.131Z\",\"text\":\"\",\"ID\":1229}]","dateTime":"2022-11-04T14:04:24.522Z","text":"","ID":759},{"hash":"[{\"dateTime\":\"2022-11-04T09:42:10.029Z\",\"text\":\"Chapter 1. Welcome to Software Construction\",\"hash\":\"fc7f5fdec04d3984cc04732e8b7e6f39\",\"fileHash\":\"c3d57eb88086a04b1e04d06a9b6188e5\",\"chapterSeperator\":\"^Chapter \\\\d\\\\.\",\"ID\":73,\"language\":\"en\"}]","dateTime":"2022-11-04T09:46:40.131Z","text":"","ID":1229}]