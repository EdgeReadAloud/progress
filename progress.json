[{"dateTime":"2022-11-04T14:31:29.790Z","text":"Continuing with the housing-materials analogy: encapsulation is a way of saying that you can look at the outside of the house but you can't get close enough to make out the door's details. You are allowed to know that there's a door, and you're allowed to know whether the door is open or closed, but you're not allowed to know whether the door is made of wood, fiberglass, steel, or some other material, and you're certainly not allowed to look at each individual wood fiber.","hash":"46591b4004f88b88bd09fe3bd00260d6","fileHash":"c3d57eb88086a04b1e04d06a9b6188e5","chapterSeperator":"^Chapter \\d\\.","ID":73,"language":"en"},{"hash":"[{\"dateTime\":\"2022-11-04T11:18:42.753Z\",\"text\":\"A good general rule is that a system-level diagram like Figure 5-5 should be an acyclic graph. In other words, a program shouldn't contain any circular relationships in which Class A uses Class B, Class B uses Class C, and Class C uses Class A.\",\"hash\":\"4cde34e9742d806328bfc3d78a6a7d32\",\"fileHash\":\"c3d57eb88086a04b1e04d06a9b6188e5\",\"chapterSeperator\":\"^Chapter \\\\d\\\\.\",\"ID\":73,\"language\":\"en\"},{\"hash\":\"[{\\\"dateTime\\\":\\\"2022-11-04T09:42:10.029Z\\\",\\\"text\\\":\\\"Chapter 1. Welcome to Software Construction\\\",\\\"hash\\\":\\\"fc7f5fdec04d3984cc04732e8b7e6f39\\\",\\\"fileHash\\\":\\\"c3d57eb88086a04b1e04d06a9b6188e5\\\",\\\"chapterSeperator\\\":\\\"^Chapter \\\\\\\\d\\\\\\\\.\\\",\\\"ID\\\":73,\\\"language\\\":\\\"en\\\"}]\",\"dateTime\":\"2022-11-04T09:46:40.131Z\",\"text\":\"\",\"ID\":1229}]","dateTime":"2022-11-04T14:04:24.522Z","text":"","ID":759},{"hash":"[{\"dateTime\":\"2022-11-04T09:42:10.029Z\",\"text\":\"Chapter 1. Welcome to Software Construction\",\"hash\":\"fc7f5fdec04d3984cc04732e8b7e6f39\",\"fileHash\":\"c3d57eb88086a04b1e04d06a9b6188e5\",\"chapterSeperator\":\"^Chapter \\\\d\\\\.\",\"ID\":73,\"language\":\"en\"}]","dateTime":"2022-11-04T09:46:40.131Z","text":"","ID":1229}]